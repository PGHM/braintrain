- Seems that Flutter has real apps out there already https://flutter.dev/showcase, Alibaba as their main showing (which is kind of big)
- Nice to notice that after half a year from the previous BT I remember nothing about Flutter or dart for that matter...
- Separation of logic and views compared to the "basic" Flutter flow presented in the docs https://medium.com/flutter-community/simple-flutter-patterns-325a91a3b8f2
- Short summary of how Flutter works to remind future me: there is a State, which is mutable, and a StatefulWidget, which is not. You can modify the state with "setState()" and then the "build()" function of the state gets called which basically builds the Widget again according to the state. So you do not directly modify the UI, the UI is created in response to the changes in State. There are also StatelessWidgets which do not change, like Text.
- And btw methods that begin with underscore are private in Dart (not an awesome convention but whatever)
- Dart has thing called initializer lists that work hand in hand with constructors which had the nice syntax of assigning values to the properties without boilerplate, in this case you can choose how the values from parameters to the properies, this all happens before the constructor http://jpryan.me/dartbyexample/examples/initializer_lists/
- Took me a few hours to get back on track reading my old code, so not bad! I'd still say the biggest problem is the creeping pyramid of doom of the UI trees, maybe I'll just need to write more concise Widgets and split them up...
- Dart has 'dynamic' in a same way as Swift has 'Any' https://medium.com/coding-with-flutter/dart-vs-swift-a-comparison-6491e945dc17
- In Dart parameters are unnamed by default (like in Java for example) but by adding them inside curly braces you can make them named
- Dart has a way to define extensions to classes using 'mixin's (they can be normal classes too) and then applying the extensions using 'with' keyword. You can restrict where the mixins can be used too with 'on'. https://dart.dev/guides/language/language-tour?source=post_page---------------------------#adding-features-to-a-class-mixins
- Dart does not have Swift or Kotlin like support to enums / sealed classes, just simple enums, you can use libraries (but that is true to almost anything)
- Even if Dart does not have Optionals, you can do something called "Conditional member access" that is very familiar lookin "foo?.bar", if foo is null then bar is not accessed but null is returned
- Seems that Container is the true hero of Flutter, as it can relieve much of the explosion of Wdigets when positioning something, as it can do padding, alignment, margin, borders, gradient, shadows, images and MORE instead of having all of this as separate Widgets https://medium.com/flutter-community/flutters-container-this-ain-t-your-daddy-s-div-100817339610
- Dart somehow feels clunky and is missing lot of modern features of Swift / Kotlin, but I guess if I would code more it would matter less somehow? I don't know but this post sure hit home for the current feelings: https://medium.com/yakka/flutter-doesnt-need-kotlin-or-anything-else-5773965d5905
- I did have this fear of having bad performance, making all the Widgets again and again when changing state, but I guess this has been optimized for the developer https://medium.com/flutter/flutter-dont-fear-the-garbage-collector-d69b3ff1ca30
- Flutter has platform channels for implementing platform specific code and calling it https://blog.solutelabs.com/integrating-third-party-native-sdks-in-flutter-df418829dcf7
- Seems that now they have native looking iOS widgets officially https://flutter.dev/docs/development/ui/widgets/cupertino
- Seems that something called BLOC pattern is very popular when managing State in Flutter apps https://ayusch.com/understanding-bloc-architecture-in-flutter/

- Article about how different multiplatform things work: https://www.donnfelker.com/flutter-just-might-work/

- https://dart.dev/guides/language/coming-from/swift-to-dart Dart comparison to Swift, written by Dart developers
