Will be making an orienteering app that can help to verify in competitions
whether the competitors have visited the right places by using QR codes and
positioning. (Obviously not a really good way, but will make do for this to
get use of some of the API:s in phones in Flutter)

Very good place to start is the Flutter getting started and making the first
app and then getting that going and checking the documentation for anything
that you see and do not understand. Also these are really good to read
through if you come from web / mobile development:

https://flutter.io/docs/get-started/flutter-for/android-devs
https://flutter.io/docs/get-started/flutter-for/ios-devs
https://flutter.io/docs/get-started/flutter-for/web-devs

Using Firebase as backend for this project, it was easy enough to setup with
Flutter, no easy place to see the reference though, only found this:
https://codelabs.developers.google.com/codelabs/flutter-firebase/#0 The API is
similar to the other API:s though so youcan use Swift or something and get it
from there

Random notes:

- final means that the object in variable cannot be reassigned

- const keyword means that the object cannot be changed, but this keyword
  appears also in constructors and when you are creating an object you must
  still use the const keyword even when the constructor is marked constant to
  create compile-time constant, you can omit it only in constant context for
  example here "const foo = ConstantConstructor()" instead of doing "const foo
  = const ConstantConstructor()"

- async and await are handy keywords when doing stuff with Futures, they are
  syntastic sugar to do things in more concise way

- Wtf this margin and spacing solution in Flutter, putting everything inside
  container or padding seems horrible, cannot even put spacing on Rows or
  Columns it seems O_o

- Container with BoxConstraints is your friend when you want to actually
  determine sizes for something but not explicit sizes

- alt+enter on Widget brings possibility to wrap it in different things, very
  useful for Paddings and Containers for example

- Too bad dart does not have autogenerated Model constructors like Kotlin, but
  it does have syntastic sugar to make constuctor assign the constructor
  parameter to instace variable like this: Foo(this.bar, this.baz)

- Could not find a way to do shorthand lambda in Dart like ( $0.toJson() )
  instead you still have to do (foo) => foo.toJson(). Can infer the type
  luckily

- Sometimes Dart does not infer the types even when it would clearly be
  possible, like when you are mapping on List<dynamic> and the result is known
  compile time, like foo.map((bar) => Foo()) it still sometimes returns
  List<dynamic> as the result instead of List<Foo>. You can do map<Foo> to
  make a cast, but seems so unnecessary here. Seems that the simple case works
  but not in more complicated one.

- In dart there is no optional and bool is an object and if you fo this with
  null boolean: if(nullBoolean) runtime assert is run that says that boolean
  cannot be null. So you have to do this: if(nullBoolean != null &&
  nullBoolean) if there is any chance for it being null...

- Autocomplete seems a little shady on Android Studio, but I guess there can
  be 3rd party packages for it
