* Kotlin actually has a very nice documentation and if you are experienced developer you should start with that and dive into what it has to offer https://kotlinlang.org/docs/reference/ and of course a online playground to play with the code https://play.kotlinlang.org/
* Kotlin has data classes to generate Model type of classes easily https://kotlinlang.org/docs/reference/data-classes.html
* Kotlin has tail recursion optimization https://kotlinlang.org/docs/reference/functions.html#tail-recursive-functions
* With Kotlin you can put primary constructor right into class declaration to be more concise and you can have multiple init blocks in addition to that and secondary constructors https://kotlinlang.org/docs/reference/classes.html
* Like in Swift you can do class extension pretty easily, with even less the code that in Swift https://kotlinlang.org/docs/reference/extensions.html
* Unlike Swift you can actually still have backing field to properties with custom setter or getter https://kotlinlang.org/docs/reference/properties.html#backing-fields
* Eveyrthing in Kotlin is final by default, so if you want to allow overriding you have to specify it explicitly 
* Notes about where and how to put constants in Kotlin, worth a read https://blog.egorand.me/where-do-i-put-my-constants-in-kotlin/
* There is no ternary operators (there is the Elvis :? operator though) but you can use if-else on a single line https://kotlinlang.org/docs/reference/control-flow.html
* Kotlin has two types of constructs for defining inline functions, lambdas and anonymous functions https://kotlinlang.org/docs/reference/lambdas.html#lambda-expressions-and-anonymous-functions
* In Kotlin you can actually do an return from lambda, so that it does not return from the outer function, like breaking from for loop for example https://kotlinlang.org/docs/reference/returns.html#return-at-labels
* Sadly in Kotlin you need parentheses to if statements, unlike in Swift, some discussion about it and developer response https://discuss.kotlinlang.org/t/feature-request-removing-unnecessary-parenthesis/1607/5
* Kotlin does not have handy collection literals that Swift has, but you have initializers functions instead, like listOf(1, 2, 3) or mutableListOf(1, 2, 3) https://kotlinlang.org/docs/reference/collections.html
* You can use operators when passing parameters to higher order functions like this Int::plus https://stackoverflow.com/questions/39469158/kotlin-passing-operator-as-a-function-parameter

More notes from another session:

* Kotlin has much like Swifts new Property Observers Property Delegates, and there are some provided by stdlib: 'observable', 'vetoable' and 'notNull' https://americanexpress.io/advanced-kotlin-delegates/
* Kotlin does not have static variables or functions like many other languages, but instead you can create 'companion object' and this object acts as a Singleton where you can access things "statically" as in other languages
* There is a thing called Kotlin Multiplatform to share Kotlin code in many platform, such as iOS, so you can write business logic in one place, but seems that not UI, which then again could be done with for example Flutter! https://blog.kotlin-academy.com/flutter-and-kotlin-multiplatform-relationship-890616005f57
* 'let' vs 'run' vs 'also' vs 'apply': They are scoping functions that have similar purposes, but little bit different return values and access to object via 'it' or without it. Basically you don't have to use them all and some are better then others in certain situations https://proandroiddev.com/the-tldr-on-kotlins-let-apply-also-with-and-run-functions-6253f06d152b
* Also related to previous note this nice flowchart https://raw.githubusercontent.com/JoseAlcerreca/kotlin-std-fun/master/Kotlin%20Standard%20Functions%20v1.png 
* In Kotlin no 'switch' but 'when' https://kotlinlang.org/docs/reference/control-flow.html
* Kotlin interestingly oneups Swifts enums with sealed classes, which are kind of enums, but values are subclasses of the sealed class, so you can use the class in a switch statement to go through all of the possible subclasses https://proandroiddev.com/understanding-kotlin-sealed-classes-65c0adad7015
* Syntastic sugar for delegation part of your new class to other class, the 'by' keyword, it can be used with variables or functions, makes composition easier https://proandroiddev.com/simpler-kotlin-class-hierarchies-using-class-delegation-35464106fed5
* Kotlin has the ability to easily make DSL:s to help with domain spesific syntax, but creating them is quite the task https://www.grokkingandroid.com/creating-kotlin-dsls/
* Story about adapting Kotlin multiplatform from March 2019 (and failing to do so) https://quickbirdstudios.com/blog/is-kotlin-native-production-ready/ 
* Kotlin has answer for callback hells with coroutines, which seem like a nicer way than Promises to handle making code that looks logical and can be async https://www.youtube.com/watch?v=_hfBv0a09Jc
* Nice to way to replicate Swift's 'guard' statement is to the elvis operator: 'nullableVar ?: return'. Kotlin actually has little bit more intelligent compiler in the way it remembers if variable has been checked for null for the rest of the scope is variable is not mutable
